{"version":3,"sources":["webpack:///./node_modules/_rc-editor-plugin-emoji@0.2.9@rc-editor-plugin-emoji/assets/index.css?7e77","webpack:///./examples/plugin.js"],"names":["callbacks","getEditorState","setEditorState","getStyleMap","toggleInlineStyle","style","editorState","RichUtils","Test","name","component","toHtml","text","entity","console","log","getType","customStyleFn","styleSet","map","color","fontWeight","reduce","Object","assign","plugins","toolbars","keyDown","ev","keyCode","ctrlKey","EditorWrapper","state","onChange","setState","render","GetHTML","React","Component","ReactDOM","document","getElementById"],"mappings":";;;;;AAAA,yC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAMA,YAAY;AAChBC,kBAAgB,0BAAM,CAAE,CADR;AAEhBC,kBAAgB,0BAAM,CAAE,CAFR;AAGhBC,eAAa,uBAAM,CAAE;AAHL,CAAlB;;AAMA,SAASC,iBAAT,CAA2BC,KAA3B,EAAkC;AAChC,SAAO,YAAM;AACX,QAAMC,cAAcN,UAAUC,cAAV,EAApB;;AAEAD,cAAUE,cAAV,CACE,mDAASK,CAACH,iBAAV,CAA4BE,WAA5B,sBAA2DD,KAA3D,CADF;AAGD,GAND;AAOD;;AAED,IAAMG,OAAO;AACXC,QAAM,MADK;AAEXT,sBAFW;AAGXU,aAAW;AAAA;AAAA;AACT;AAAA;AAAA,QAAK,aAAaN,kBAAkB,KAAlB,CAAlB;AAAA;AAAA,KADS;AAET;AAAA;AAAA,QAAK,aAAaA,kBAAkB,MAAlB,CAAlB;AAAA;AAAA;AAFS,GAHA;AAOXO,QAPW,kBAOJC,IAPI,EAOEC,MAPF,EAOU;AACnBC,YAAQC,GAAR,CAAY,WAAZ,EAAyBF,MAAzB;AACA,QAAIA,OAAOG,OAAP,OAAqB,MAAzB,EAAiC;AAC/B;AACD;AACF,GAZU;AAaXC,eAbW,yBAaGC,QAbH,EAaa;AACtB,WAAOA,SAASC,GAAT,CAAa,iBAAS;AAC3B,UAAId,UAAU,oBAAd,EAAoC;AAClC,eAAO;AACLe,iBAAO;AADF,SAAP;AAGD;AACD,UAAIf,UAAU,qBAAd,EAAqC;AACnC,eAAO;AACLgB,sBAAY;AADP,SAAP;AAGD;AACD,aAAO,EAAP;AACD,KAZM,EAYJC,MAZI,CAYGC,OAAOC,MAZV,CAAP;AAaD;AA3BU,CAAb;;AA8BA,IAAMC,UAAU,CAACjB,IAAD,CAAhB;AACA,IAAMkB,WAAW,CAAC,CAAC,MAAD,CAAD,CAAjB;;AAEA,SAASC,OAAT,CAAiBC,EAAjB,EAAqB;AACnB,MAAIA,GAAGC,OAAH,KAAe,EAAnB,EAAuB;AACrB,QAAID,GAAGE,OAAP,EAAgB;AACd,aAAO,aAAP;AACD;AACD,WAAO,IAAP;AACD;AACD,SAAO,KAAP;AACD;;IAEKC,a;;;;;;;;;;;;wJACJC,K,GAAQ;AACNP,eAAS,EADH;AAENnB,mBAAa;AAFP,K,QAIR2B,Q,GAAW,UAAC3B,WAAD,EAAiB;AAC1B,YAAK4B,QAAL,CAAc;AACZ5B;AADY,OAAd;AAGD,K;;;0BACD6B,M,qBAAS;AACP,WAAQ;AAAA;AAAA;AACN,kEAAC,kEAAD;AACE,iBAASV,OADX;AAEE,kBAAUC,QAFZ;AAGE,mBAAW,mBAACE,EAAD;AAAA,iBAAQD,QAAQC,EAAR,CAAR;AAAA,SAHb;AAIE,kBAAU,KAAKK,QAJjB;AAKE,eAAO,KAAKD,KAAL,CAAW1B;AALpB,QADM;AAQL,WAAK0B,KAAL,CAAW1B,WAAX,GAAyB,uEAAO8B,CAAC,KAAKJ,KAAL,CAAW1B,WAAnB,CAAzB,GAA2D;AARtD,KAAR;AAUD,G;;;EArByB,6CAAK+B,CAACC,S;;AAwBlC,iDAAQC,CAACJ,MAAT,CAAgB,4DAAC,aAAD,OAAhB,EAAmCK,SAASC,cAAT,CAAwB,iBAAxB,CAAnC,E","file":"examples/plugin.js","sourcesContent":["// removed by extract-text-webpack-plugin\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/_rc-editor-plugin-emoji@0.2.9@rc-editor-plugin-emoji/assets/index.css\n// module id = 102\n// module chunks = 0 1 2 3","// use jsx to render html, do not modify simple.html\n/* eslint-disable new-cap, no-console */\n\nimport 'rc-editor-core/assets/index.less';\nimport { EditorCore, GetHTML } from 'rc-editor-core';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { RichUtils } from 'draft-js';\nimport 'rc-editor-plugin-emoji/assets/index.css';\n\nconst callbacks = {\n  getEditorState: () => {},\n  setEditorState: () => {},\n  getStyleMap: () => {},\n};\n\nfunction toggleInlineStyle(style) {\n  return () => {\n    const editorState = callbacks.getEditorState();\n\n    callbacks.setEditorState(\n      RichUtils.toggleInlineStyle(editorState, `customer-style-${style}`)\n    );\n  };\n}\n\nconst Test = {\n  name: 'test',\n  callbacks,\n  component: <div>\n    <div onMouseDown={toggleInlineStyle('red')}>red</div>\n    <div onMouseDown={toggleInlineStyle('bold')}>bold</div>\n  </div>,\n  toHtml(text, entity) {\n    console.log('>> toHtml', entity);\n    if (entity.getType() === 'LINK') {\n      return `<a href=\"#\">text</a>`;\n    }\n  },\n  customStyleFn(styleSet) {\n    return styleSet.map(style => {\n      if (style === 'customer-style-red') {\n        return {\n          color: 'red',\n        };\n      }\n      if (style === 'customer-style-bold') {\n        return {\n          fontWeight: 'bold',\n        };\n      }\n      return {};\n    }).reduce(Object.assign);\n  },\n};\n\nconst plugins = [Test];\nconst toolbars = [['test']];\n\nfunction keyDown(ev) {\n  if (ev.keyCode === 13) {\n    if (ev.ctrlKey) {\n      return 'split-block';\n    }\n    return true;\n  }\n  return false;\n}\n\nclass EditorWrapper extends React.Component {\n  state = {\n    plugins: [],\n    editorState: null,\n  };\n  onChange = (editorState) => {\n    this.setState({\n      editorState,\n    });\n  }\n  render() {\n    return (<div>\n      <EditorCore\n        plugins={plugins}\n        toolbars={toolbars}\n        onKeyDown={(ev) => keyDown(ev)}\n        onChange={this.onChange}\n        value={this.state.editorState}\n      />\n      {this.state.editorState ? GetHTML(this.state.editorState) : null}\n    </div>);\n  }\n}\n\nReactDOM.render(<EditorWrapper />, document.getElementById('__react-content'));\n\n\n\n// WEBPACK FOOTER //\n// ./examples/plugin.js"],"sourceRoot":""}