{"version":3,"sources":["webpack:///./examples/plugin.js"],"names":["findWithRegex","regex","contentBlock","callback","text","getText","matchArr","start","exec","index","length","suggestionRegex","RegExp","callbacks","getEditorState","setEditorState","getStyleMap","toggleInlineStyle","style","editorState","Test","name","component","toHtml","entity","console","log","getType","customStyleFn","styleSet","map","color","fontWeight","reduce","Object","assign","plugins","toolbars","keyDown","ev","keyCode","ctrlKey","EditorWrapper","state","onChange","setState","render","Component","document","getElementById"],"mappings":"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","file":"plugin.js","sourcesContent":["// use jsx to render html, do not modify simple.html\n\nimport 'rc-editor-core/assets/index.less';\nimport { EditorCore, Toolbar, GetText, createPlugin, GetHTML } from 'rc-editor-core';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Entity, Modifier, EditorState, RichUtils  } from 'draft-js';\nimport 'rc-editor-plugin-emoji/assets/index.css';\n\nfunction findWithRegex(regex, contentBlock, callback) {\n  // Get the text from the contentBlock\n  const text = contentBlock.getText();\n  let matchArr;\n  let start; // eslint-disable-line\n  // Go through all matches in the text and return the indizes to the callback\n  while ((matchArr = regex.exec(text)) !== null) { // eslint-disable-line\n    start = matchArr.index;\n    callback(start, start + matchArr[0].length);\n  }\n}\n\nconst suggestionRegex = new RegExp(`(\\\\s|^)@[\\\\w]*`, 'g');\n\nconst callbacks = {\n  getEditorState: () => {},\n  setEditorState: () => {},\n  getStyleMap: () => {},\n};\n\nfunction toggleInlineStyle(style) {\n  return () => {\n    const editorState = callbacks.getEditorState();\n\n    callbacks.setEditorState(\n      RichUtils.toggleInlineStyle(editorState, `customer-style-${style}`)\n    );\n  }\n}\n\nconst Test = {\n  name: 'test',\n  callbacks,\n  component: <div>\n    <div onMouseDown={toggleInlineStyle('red')}>red</div>\n    <div onMouseDown={toggleInlineStyle('bold')}>bold</div>\n  </div>,\n  toHtml(text, entity) {\n    console.log('>> toHtml', entity);\n    if (entity.getType() === 'LINK') {\n      return `<a href=\"#\">text</a>`\n    }\n  },\n  customStyleFn(styleSet) {\n   return styleSet.map(style => {\n      if (style === 'customer-style-red') {\n        return {\n          color: 'red'\n        };\n      }\n      if (style === 'customer-style-bold') {\n        return {\n          fontWeight: 'bold'\n        };\n      }\n      return {}\n    }).reduce(Object.assign);\n  },\n};\n\nconst plugins = [Test];\nconst toolbars = [['test']];\n\nfunction keyDown(ev) {\n  if (ev.keyCode === 13) {\n    if (ev.ctrlKey) {\n      return 'split-block';\n    }\n    return true\n  }\n  return false;\n}\n\nclass EditorWrapper extends React.Component {\n  state = {\n    plugins: [],\n    editorState: null,\n  };\n  onChange = (editorState) => {\n    this.setState({\n      editorState,\n    });\n  }\n  render() {\n    return <div>\n      <EditorCore\n        plugins={plugins}\n        toolbars={toolbars}\n        onKeyDown={(ev) => keyDown(ev)}\n        onChange={this.onChange}\n        value={this.state.editorState}\n      />\n      {this.state.editorState ? GetHTML(this.state.editorState) : null}\n    </div>\n  }\n}\n\nReactDOM.render(<EditorWrapper />, document.getElementById('__react-content'));\n\n\n\n// WEBPACK FOOTER //\n// ./examples/plugin.js"],"sourceRoot":""}