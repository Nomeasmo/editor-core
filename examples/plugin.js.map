{"version":3,"sources":["webpack:///./examples/plugin.js","webpack:///./node_modules/rc-editor-plugin-emoji/assets/index.css?738a"],"names":["findWithRegex","regex","contentBlock","callback","text","getText","matchArr","start","exec","index","length","suggestionRegex","RegExp","callbacks","getEditorState","setEditorState","getStyleMap","toggleInlineStyle","style","editorState","RichUtils","Test","name","component","toHtml","entity","console","log","getType","customStyleFn","styleSet","map","color","fontWeight","reduce","Object","assign","plugins","toolbars","keyDown","ev","keyCode","ctrlKey","EditorWrapper","state","onChange","setState","render","GetHTML","React","Component","ReactDOM","document","getElementById"],"mappings":"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","file":"examples/plugin.js","sourcesContent":["// use jsx to render html, do not modify simple.html\n\nimport 'rc-editor-core/assets/index.less';\nimport { EditorCore, Toolbar, GetText, createPlugin, GetHTML } from 'rc-editor-core';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Entity, Modifier, EditorState, RichUtils  } from 'draft-js';\nimport 'rc-editor-plugin-emoji/assets/index.css';\n\nfunction findWithRegex(regex, contentBlock, callback) {\n  // Get the text from the contentBlock\n  const text = contentBlock.getText();\n  let matchArr;\n  let start; // eslint-disable-line\n  // Go through all matches in the text and return the indizes to the callback\n  while ((matchArr = regex.exec(text)) !== null) { // eslint-disable-line\n    start = matchArr.index;\n    callback(start, start + matchArr[0].length);\n  }\n}\n\nconst suggestionRegex = new RegExp(`(\\\\s|^)@[\\\\w]*`, 'g');\n\nconst callbacks = {\n  getEditorState: () => {},\n  setEditorState: () => {},\n  getStyleMap: () => {},\n};\n\nfunction toggleInlineStyle(style) {\n  return () => {\n    const editorState = callbacks.getEditorState();\n\n    callbacks.setEditorState(\n      RichUtils.toggleInlineStyle(editorState, `customer-style-${style}`)\n    );\n  }\n}\n\nconst Test = {\n  name: 'test',\n  callbacks,\n  component: <div>\n    <div onMouseDown={toggleInlineStyle('red')}>red</div>\n    <div onMouseDown={toggleInlineStyle('bold')}>bold</div>\n  </div>,\n  toHtml(text, entity) {\n    console.log('>> toHtml', entity);\n    if (entity.getType() === 'LINK') {\n      return `<a href=\"#\">text</a>`\n    }\n  },\n  customStyleFn(styleSet) {\n   return styleSet.map(style => {\n      if (style === 'customer-style-red') {\n        return {\n          color: 'red'\n        };\n      }\n      if (style === 'customer-style-bold') {\n        return {\n          fontWeight: 'bold'\n        };\n      }\n      return {}\n    }).reduce(Object.assign);\n  },\n};\n\nconst plugins = [Test];\nconst toolbars = [['test']];\n\nfunction keyDown(ev) {\n  if (ev.keyCode === 13) {\n    if (ev.ctrlKey) {\n      return 'split-block';\n    }\n    return true\n  }\n  return false;\n}\n\nclass EditorWrapper extends React.Component {\n  state = {\n    plugins: [],\n    editorState: null,\n  };\n  onChange = (editorState) => {\n    this.setState({\n      editorState,\n    });\n  }\n  render() {\n    return <div>\n      <EditorCore\n        plugins={plugins}\n        toolbars={toolbars}\n        onKeyDown={(ev) => keyDown(ev)}\n        onChange={this.onChange}\n        value={this.state.editorState}\n      />\n      {this.state.editorState ? GetHTML(this.state.editorState) : null}\n    </div>\n  }\n}\n\nReactDOM.render(<EditorWrapper />, document.getElementById('__react-content'));\n\n\n\n// WEBPACK FOOTER //\n// ./examples/plugin.js","// removed by extract-text-webpack-plugin\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/rc-editor-plugin-emoji/assets/index.css\n// module id = 97\n// module chunks = 0 1 2 3"],"sourceRoot":""}